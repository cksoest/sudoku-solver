import sudoku_solver
import pytest


def test___int__():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s1 = sudoku_solver.Sudoku("aaaaaa445aa8a35aaa46aa2a8aaaaa2aaaaaa7a8aaaaaaaaa5a2a45aaaaa18aa9aaa3aaa6aa19aaaa")
    s2 = sudoku_solver.Sudoku("4r36015k8de94kjr2o8520000cfghnjiaw4lk70i0fg0svb5f7x102erv2jh67909ld5jh0bd3hg4uy8k")

    assert s0.data == [
        ['-', '-', 6, '-', '-', '-', '-', '-', 9],
        ['-', 1, '-', 3, '-', '-', 2, 7, '-'],
        [5, 9, '-', '-', '-', '-', 4, '-', '-'],
        ['-', '-', 5, 9, '-', 6, '-', 4, '-'],
        ['-', '-', 9, '-', 5, 7, '-', 2, '-'],
        [7, '-', '-', '-', 1, '-', '-', '-', '-'],
        ['-', '-', 3, 4, 9, '-', 1, '-', '-'],
        ['-', '-', 2, '-', 7, '-', '-', '-', '-'],
        ['-', '-', '-', '-', '-', '-', '-', 9, '-']]

    assert s1.data == [
        ['-', '-', '-', '-', '-', '-', 4, 4, 5],
        ['-', '-', 8, '-', 3, 5, '-', '-', '-'],
        [4, 6, '-', '-', 2, '-', 8, '-', '-'],
        ['-', '-', '-', 2, '-', '-', '-', '-', '-'],
        ['-', 7, '-', 8, '-', '-', '-', '-', '-'],
        ['-', '-', '-', '-', 5, '-', 2, '-', 4],
        [5, '-', '-', '-', '-', '-', 1, 8, '-'],
        ['-', 9, '-', '-', '-', 3, '-', '-', '-'],
        [6, '-', '-', 1, 9, '-', '-', '-', '-']]

    assert s2.data == [
        [4, '-', 3, 6, '-', 1, 5, '-', 8],
        ['-', '-', 9, 4, '-', '-', '-', 2, '-'],
        [8, 5, 2, '-', '-', '-', '-', '-', '-'],
        ['-', '-', '-', '-', '-', '-', '-', 4, '-'],
        ['-', 7, '-', '-', '-', '-', '-', '-', '-'],
        ['-', '-', 5, '-', 7, '-', 1, '-', 2],
        ['-', '-', '-', 2, '-', '-', 6, 7, 9],
        ['-', 9, '-', '-', 5, '-', '-', '-', '-'],
        ['-', 3, '-', '-', 4, '-', '-', 8, '-']]

    with pytest.raises(IndexError):
        sudoku_solver.Sudoku("100007090030020008009600500005300900010080002600004000300000010041000007007000300450060")

    with pytest.raises(IndexError):
        sudoku_solver.Sudoku("aaaaaaa45aa8a35aaa46aa2a8aaaaa2aaaaaa7a8aaaaaaaaa5a2a45aaaaa18aa9aaa3aaa")


def test_from_file():
    s3 = sudoku_solver.Sudoku.from_file("test_sudokus/sudoku_1")
    s4 = sudoku_solver.Sudoku.from_file("test_sudokus/sudoku_2")
    s5 = sudoku_solver.Sudoku.from_file("test_sudokus/sudoku_3")

    assert s3.data == [
        ['-', '-', 6, '-', '-', '-', '-', '-', 9],
        ['-', 1, '-', 3, '-', '-', 2, 7, '-'],
        [5, 9, '-', '-', '-', '-', 4, '-', '-'],
        ['-', '-', 5, 9, '-', 6, '-', 4, '-'],
        ['-', '-', 9, '-', 5, 7, '-', 2, '-'],
        [7, '-', '-', '-', 1, '-', '-', '-', '-'],
        ['-', '-', 3, 4, 9, '-', 1, '-', '-'],
        ['-', '-', 2, '-', 7, '-', '-', '-', '-'],
        ['-', '-', '-', '-', '-', '-', '-', 9, '-']]

    assert s4.data == [
        ['-', '-', '-', '-', '-', '-', '-', 4, 5],
        ['-', '-', 8, '-', 3, 5, '-', '-', '-'],
        [4, 6, '-', '-', 2, '-', 8, '-', '-'],
        ['-', '-', '-', 2, '-', '-', '-', '-', '-'],
        ['-', 7, '-', 8, '-', '-', '-', '-', '-'],
        ['-', '-', '-', '-', 5, '-', 2, '-', 4],
        [5, '-', '-', '-', '-', '-', 1, 8, '-'],
        ['-', 9, '-', '-', '-', 3, '-', '-', '-'],
        [6, '-', '-', 1, 9, '-', '-', '-', '-']]

    assert s5.data == [
        ['-', '-', 3, 6, '-', 1, 5, '-', 8],
        ['-', '-', 9, 4, '-', '-', '-', 2, '-'],
        [8, 5, '-', '-', '-', '-', '-', '-', '-'],
        ['-', '-', '-', '-', '-', '-', '-', 4, '-'],
        ['-', 7, '-', '-', '-', '-', '-', '-', '-'],
        ['-', '-', 5, '-', 7, '-', 1, '-', 2],
        ['-', '-', '-', 2, '-', '-', 6, 7, 9],
        ['-', 9, '-', '-', 5, '-', '-', '-', '-'],
        ['-', 3, '-', '-', 4, '-', '-', 8, '-']]

    with pytest.raises(IndexError):
        sudoku_solver.Sudoku.from_file("test_sudokus/sudoku_4")

    with pytest.raises(IndexError):
        sudoku_solver.Sudoku.from_file("test_sudokus/sudoku_5")


def test_get_data():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")

    assert s0.data == [
        ['-', '-', 6, '-', '-', '-', '-', '-', 9],
        ['-', 1, '-', 3, '-', '-', 2, 7, '-'],
        [5, 9, '-', '-', '-', '-', 4, '-', '-'],
        ['-', '-', 5, 9, '-', 6, '-', 4, '-'],
        ['-', '-', 9, '-', 5, 7, '-', 2, '-'],
        [7, '-', '-', '-', 1, '-', '-', '-', '-'],
        ['-', '-', 3, 4, 9, '-', 1, '-', '-'],
        ['-', '-', 2, '-', 7, '-', '-', '-', '-'],
        ['-', '-', '-', '-', '-', '-', '-', 9, '-']]


def test_set_data():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.set_data([
        ['-', '-', '-', '-', '-', '-', 4, 4, 5],
        ['-', '-', 8, '-', 3, 5, '-', '-', '-'],
        [4, 6, '-', '-', 2, '-', 8, '-', '-'],
        ['-', '-', '-', 2, '-', '-', '-', '-', '-'],
        ['-', 7, '-', 8, '-', '-', '-', '-', '-'],
        ['-', '-', '-', '-', 5, '-', 2, '-', 4],
        [5, '-', '-', '-', '-', '-', 1, 8, '-'],
        ['-', 9, '-', '-', '-', 3, '-', '-', '-'],
        [6, '-', '-', 1, 9, '-', '-', '-', '-']])

    assert s0.data == [
        ['-', '-', '-', '-', '-', '-', 4, 4, 5],
        ['-', '-', 8, '-', 3, 5, '-', '-', '-'],
        [4, 6, '-', '-', 2, '-', 8, '-', '-'],
        ['-', '-', '-', 2, '-', '-', '-', '-', '-'],
        ['-', 7, '-', 8, '-', '-', '-', '-', '-'],
        ['-', '-', '-', '-', 5, '-', 2, '-', 4],
        [5, '-', '-', '-', '-', '-', 1, 8, '-'],
        ['-', 9, '-', '-', '-', 3, '-', '-', '-'],
        [6, '-', '-', 1, 9, '-', '-', '-', '-']]


def test_get_colomns():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    colomns = sudoku_solver.Sudoku.get_colomns(s0.data)

    assert colomns == [
        ['-', '-', 5, '-', '-', 7, '-', '-', '-'],
        ['-', 1, 9, '-', '-', '-', '-', '-', '-'],
        [6, '-', '-', 5, 9, '-', 3, 2, '-'],
        ['-', 3, '-', 9, '-', '-', 4, '-', '-'],
        ['-', '-', '-', '-', 5, 1, 9, 7, '-'],
        ['-', '-', '-', 6, 7, '-', '-', '-', '-'],
        ['-', 2, 4, '-', '-', '-', 1, '-', '-'],
        ['-', 7, '-', 4, 2, '-', '-', '-', 9],
        [9, '-', '-', '-', '-', '-', '-', '-', '-']]


def test_get_subgrids():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    subgrids = sudoku_solver.Sudoku.get_subgrids(s0.data)

    assert subgrids == [
        ['-', '-', 6, '-', 1, '-', 5, 9, '-'],
        ['-', '-', '-', 3, '-', '-', '-', '-', '-'],
        ['-', '-', 9, 2, 7, '-', 4, '-', '-'],
        ['-', '-', 5, '-', '-', 9, 7, '-', '-'],
        [9, '-', 6, '-', 5, 7, '-', 1, '-'],
        ['-', 4, '-', '-', 2, '-', '-', '-', '-'],
        ['-', '-', 3, '-', '-', 2, '-', '-', '-'],
        [4, 9, '-', '-', 7, '-', '-', '-', '-'],
        [1, '-', '-', '-', '-', '-', '-', 9, '-']]


def test_set_colomns():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    colomns = [
        ['-', '-', 5, '-', '-', 7, '-', '-', '-'],
        ['-', 1, 9, '-', '-', '-', '-', '-', '-'],
        [6, '-', '-', 5, 9, '-', 3, 2, '-'],
        ['-', 3, '-', 9, '-', '-', 4, '-', '-'],
        ['-', '-', '-', '-', 5, 1, 9, 7, '-'],
        ['-', '-', '-', 6, 7, '-', '-', '-', '-'],
        ['-', 2, 4, '-', '-', '-', 1, '-', '-'],
        ['-', 7, '-', 4, 2, '-', '-', '-', 9],
        [9, '-', '-', '-', '-', '-', '-', '-', '-']]

    sudoku = sudoku_solver.Sudoku.set_colomns(colomns)

    assert sudoku == s0.data


def test_set_subgrids():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    subgrids = [
        ['-', '-', 6, '-', 1, '-', 5, 9, '-'],
        ['-', '-', '-', 3, '-', '-', '-', '-', '-'],
        ['-', '-', 9, 2, 7, '-', 4, '-', '-'],
        ['-', '-', 5, '-', '-', 9, 7, '-', '-'],
        [9, '-', 6, '-', 5, 7, '-', 1, '-'],
        ['-', 4, '-', '-', 2, '-', '-', '-', '-'],
        ['-', '-', 3, '-', '-', 2, '-', '-', '-'],
        [4, 9, '-', '-', 7, '-', '-', '-', '-'],
        [1, '-', '-', '-', '-', '-', '-', 9, '-']]

    sudoku = sudoku_solver.Sudoku.set_subgrids(subgrids)

    assert sudoku == s0.data


def test_create_possibility():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    assert s0.data == [
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 6, [1, 2, 3, 4, 5, 6, 7, 8, 9],
         [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
         [1, 2, 3, 4, 5, 6, 7, 8, 9], 9],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], 1, [1, 2, 3, 4, 5, 6, 7, 8, 9], 3, [1, 2, 3, 4, 5, 6, 7, 8, 9],
         [1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 7, [1, 2, 3, 4, 5, 6, 7, 8, 9]],
        [5, 9, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
         [1, 2, 3, 4, 5, 6, 7, 8, 9], 4, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 9, [1, 2, 3, 4, 5, 6, 7, 8, 9], 6,
         [1, 2, 3, 4, 5, 6, 7, 8, 9], 4, [1, 2, 3, 4, 5, 6, 7, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 9, [1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 7,
         [1, 2, 3, 4, 5, 6, 7, 8, 9], 2, [1, 2, 3, 4, 5, 6, 7, 8, 9]],
        [7, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 1,
         [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
         [1, 2, 3, 4, 5, 6, 7, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 4, 9, [1, 2, 3, 4, 5, 6, 7, 8, 9], 1,
         [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 2, [1, 2, 3, 4, 5, 6, 7, 8, 9], 7,
         [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
         [1, 2, 3, 4, 5, 6, 7, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
         [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
         [1, 2, 3, 4, 5, 6, 7, 8, 9], 9, [1, 2, 3, 4, 5, 6, 7, 8, 9]]]


def test_alldifferent():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    sudoku_ad = sudoku_solver.Sudoku.alldifferent(s0.data)

    assert sudoku_ad == [
        [[1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 8], 6, [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 8],
         [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 8], 9],
        [[4, 5, 6, 8, 9], 1, [4, 5, 6, 8, 9], 3, [4, 5, 6, 8, 9], [4, 5, 6, 8, 9], 2, 7, [4, 5, 6, 8, 9]],
        [5, 9, [1, 2, 3, 6, 7, 8], [1, 2, 3, 6, 7, 8], [1, 2, 3, 6, 7, 8], [1, 2, 3, 6, 7, 8], 4, [1, 2, 3, 6, 7, 8],
         [1, 2, 3, 6, 7, 8]],
        [[1, 2, 3, 7, 8], [1, 2, 3, 7, 8], 5, 9, [1, 2, 3, 7, 8], 6, [1, 2, 3, 7, 8], 4, [1, 2, 3, 7, 8]],
        [[1, 3, 4, 6, 8], [1, 3, 4, 6, 8], 9, [1, 3, 4, 6, 8], 5, 7, [1, 3, 4, 6, 8], 2, [1, 3, 4, 6, 8]],
        [7, [2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 8, 9], 1, [2, 3, 4, 5, 6, 8, 9],
         [2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 8, 9]],
        [[2, 5, 6, 7, 8], [2, 5, 6, 7, 8], 3, 4, 9, [2, 5, 6, 7, 8], 1, [2, 5, 6, 7, 8], [2, 5, 6, 7, 8]],
        [[1, 3, 4, 5, 6, 8, 9], [1, 3, 4, 5, 6, 8, 9], 2, [1, 3, 4, 5, 6, 8, 9], 7, [1, 3, 4, 5, 6, 8, 9],
         [1, 3, 4, 5, 6, 8, 9], [1, 3, 4, 5, 6, 8, 9], [1, 3, 4, 5, 6, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8],
         [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], 9, [1, 2, 3, 4, 5, 6, 7, 8]]]


def test_alldifferent_rcs():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    sudoku_ad = sudoku_solver.Sudoku.alldifferent_rcs(s0.data)

    assert sudoku_ad == [
        [[2, 3, 4, 8], [2, 3, 4, 7, 8], 6, [1, 2, 5, 7, 8], [2, 4, 8], [1, 2, 4, 5, 8], [3, 5, 8], [1, 3, 5, 8], 9],
        [[4, 8], 1, [4, 8], 3, [4, 6, 8], [4, 5, 8, 9], 2, 7, [5, 6, 8]],
        [5, 9, [7, 8], [1, 2, 6, 7, 8], [2, 6, 8], [1, 2, 8], 4, [1, 3, 6, 8], [1, 3, 6, 8]],
        [[1, 2, 3, 8], [2, 3, 8], 5, 9, [2, 3, 8], 6, [3, 7, 8], 4, [1, 3, 7, 8]],
        [[1, 3, 4, 6, 8], [3, 4, 6, 8], 9, [8], 5, 7, [3, 6, 8], 2, [1, 3, 6, 8]],
        [7, [2, 3, 4, 6, 8], [4, 8], [2, 8], 1, [2, 3, 4, 8], [3, 5, 6, 8, 9], [3, 5, 6, 8], [3, 5, 6, 8]],
        [[6, 8], [5, 6, 7, 8], 3, 4, 9, [2, 5, 8], 1, [5, 6, 8], [2, 5, 6, 7, 8]],
        [[1, 4, 6, 8, 9], [4, 5, 6, 8], 2, [1, 5, 6, 8], 7, [1, 3, 5, 8], [3, 5, 6, 8], [3, 5, 6, 8], [3, 4, 5, 6, 8]],
        [[1, 4, 6, 8], [4, 5, 6, 7, 8], [1, 4, 7, 8], [1, 2, 5, 6, 8], [2, 3, 6, 8], [1, 2, 3, 5, 8], [3, 5, 6, 7, 8],
         9, [2, 3, 4, 5, 6, 7, 8]]]


def test_one_check():
    s3 = sudoku_solver.Sudoku("4r36015k8de94kjr2o8500000cfghnjiaw4lk70i0fg0svb5f7x102erv2jh67909ld5jh0bd3hg4uy8k")
    s3.create_possibility()
    sudoku_ad = sudoku_solver.Sudoku.alldifferent_rcs(s3.data)
    sudoku_ac = sudoku_solver.Sudoku.one_check(sudoku_ad)

    assert sudoku_ac == [
        [4, 2, 3, 6, [2, 9], 1, 5, 9, 8],
        [[1, 6, 7], [1, 6], 9, 4, [3, 8], [3, 5, 7, 8], [3, 7], 2, [1, 3, 6, 7]],
        [8, 5, [1, 2, 6, 7], [3, 7, 9], [2, 3, 9], [2, 3, 7, 9], [3, 4, 7, 9], [1, 3, 6, 9], [1, 3, 4, 6, 7]],
        [[1, 2, 3, 6, 9], [1, 2, 6, 8], [1, 2, 6, 8], [1, 3, 5, 8, 9], [1, 2, 3, 6, 8, 9], [2, 3, 5, 6, 8, 9],
         [3, 7, 8, 9], 4, [3, 5, 6, 7]],
        [[1, 2, 3, 6, 9], 7, [1, 2, 4, 6, 8], [1, 3, 5, 8, 9], [1, 2, 3, 6, 8, 9], [2, 3, 4, 5, 6, 8, 9], [3, 8, 9],
         [3, 5, 6, 9], [3, 5, 6]],
        [[3, 6, 9], [4, 6, 8], 5, [3, 8, 9], 7, [3, 4, 6, 8, 9], 1, [3, 6, 9], 2],
        [[1, 5], [1, 4, 8], [1, 4, 8], 2, [1, 3, 8], [3, 8], 6, 7, 9],
        [[1, 2, 6, 7], 9, [1, 2, 4, 6, 7, 8], [1, 3, 7, 8], 5, [3, 6, 7, 8], [2, 3, 4], [1, 3], [1, 3, 4]],
        [[1, 2, 5, 6, 7], 3, [1, 2, 6, 7], [1, 7, 9], 4, [6, 7, 9], 2, 8, [1, 5]]]


def test_one_possibility():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    sudoku_ad = sudoku_solver.Sudoku.alldifferent_rcs(s0.data)
    sudoku_op = sudoku_solver.Sudoku.one_possibility(sudoku_ad)

    assert sudoku_op == [
        [[2, 3, 4, 8], [2, 3, 4, 7, 8], 6, [1, 2, 5, 7, 8], [2, 4, 8], [1, 2, 4, 5, 8], [3, 5, 8], [1, 3, 5, 8], 9],
        [[4, 8], 1, [4, 8], 3, [4, 6, 8], 9, 2, 7, [5, 6, 8]],
        [5, 9, [7, 8], [1, 2, 6, 7, 8], [2, 6, 8], [1, 2, 8], 4, [1, 3, 6, 8], [1, 3, 6, 8]],
        [[1, 2, 3, 8], [2, 3, 8], 5, 9, [2, 3, 8], 6, [3, 7, 8], 4, [1, 3, 7, 8]],
        [[1, 3, 4, 6, 8], [3, 4, 6, 8], 9, [8], 5, 7, [3, 6, 8], 2, [1, 3, 6, 8]],
        [7, [2, 3, 4, 6, 8], [4, 8], [2, 8], 1, [2, 3, 4, 8], 9, [3, 5, 6, 8], [3, 5, 6, 8]],
        [[6, 8], [5, 6, 7, 8], 3, 4, 9, [2, 5, 8], 1, [5, 6, 8], [2, 5, 6, 7, 8]],
        [9, [4, 5, 6, 8], 2, [1, 5, 6, 8], 7, [1, 3, 5, 8], [3, 5, 6, 8], [3, 5, 6, 8], [3, 4, 5, 6, 8]],
        [[1, 4, 6, 8], [4, 5, 6, 7, 8], [1, 4, 7, 8], [1, 2, 5, 6, 8], [2, 3, 6, 8], [1, 2, 3, 5, 8], [3, 5, 6, 7, 8],
         9, [2, 3, 4, 5, 6, 7, 8]]]


def test_one_possibility_c():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    sudoku_ad = sudoku_solver.Sudoku.alldifferent_rcs(s0.data)
    sudoku_op_c = sudoku_solver.Sudoku.one_possibility_c(sudoku_ad)

    assert sudoku_op_c == [
        [[2, 3, 4, 8], [2, 3, 4, 7, 8], 6, [1, 2, 5, 7, 8], [2, 4, 8], [1, 2, 4, 5, 8], [3, 5, 8], [1, 3, 5, 8], 9],
        [[4, 8], 1, [4, 8], 3, [4, 6, 8], 9, 2, 7, [5, 6, 8]],
        [5, 9, [7, 8], [1, 2, 6, 7, 8], [2, 6, 8], [1, 2, 8], 4, [1, 3, 6, 8], [1, 3, 6, 8]],
        [[1, 2, 3, 8], [2, 3, 8], 5, 9, [2, 3, 8], 6, [3, 7, 8], 4, [1, 3, 7, 8]],
        [[1, 3, 4, 6, 8], [3, 4, 6, 8], 9, [8], 5, 7, [3, 6, 8], 2, [1, 3, 6, 8]],
        [7, [2, 3, 4, 6, 8], [4, 8], [2, 8], 1, [2, 3, 4, 8], 9, [3, 5, 6, 8], [3, 5, 6, 8]],
        [[6, 8], [5, 6, 7, 8], 3, 4, 9, [2, 5, 8], 1, [5, 6, 8], [2, 5, 6, 7, 8]],
        [9, [4, 5, 6, 8], 2, [1, 5, 6, 8], 7, [1, 3, 5, 8], [3, 5, 6, 8], [3, 5, 6, 8], [3, 4, 5, 6, 8]],
        [[1, 4, 6, 8], [4, 5, 6, 7, 8], 1, [1, 2, 5, 6, 8], [2, 3, 6, 8], [1, 2, 3, 5, 8], [3, 5, 6, 7, 8], 9,
         [2, 3, 4, 5, 6, 7, 8]]]


def test_one_possibility_s():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    sudoku_ad = sudoku_solver.Sudoku.alldifferent_rcs(s0.data)
    sudoku_op_s = sudoku_solver.Sudoku.one_possibility_s(sudoku_ad)

    assert sudoku_op_s == [
        [[2, 3, 4, 8], [2, 3, 4, 7, 8], 6, [1, 2, 5, 7, 8], [2, 4, 8], [1, 2, 4, 5, 8], [3, 5, 8], [1, 3, 5, 8], 9],
        [[4, 8], 1, [4, 8], 3, [4, 6, 8], 9, 2, 7, [5, 6, 8]],
        [5, 9, [7, 8], [1, 2, 6, 7, 8], [2, 6, 8], [1, 2, 8], 4, [1, 3, 6, 8], [1, 3, 6, 8]],
        [[1, 2, 3, 8], [2, 3, 8], 5, 9, [2, 3, 8], 6, [3, 7, 8], 4, [1, 3, 7, 8]],
        [[1, 3, 4, 6, 8], [3, 4, 6, 8], 9, [8], 5, 7, [3, 6, 8], 2, [1, 3, 6, 8]],
        [7, [2, 3, 4, 6, 8], [4, 8], [2, 8], 1, 4, 9, [3, 5, 6, 8], [3, 5, 6, 8]],
        [[6, 8], [5, 6, 7, 8], 3, 4, 9, [2, 5, 8], 1, [5, 6, 8], [2, 5, 6, 7, 8]],
        [9, [4, 5, 6, 8], 2, [1, 5, 6, 8], 7, [1, 3, 5, 8], [3, 5, 6, 8], [3, 5, 6, 8], [3, 4, 5, 6, 8]],
        [[1, 4, 6, 8], [4, 5, 6, 7, 8], [1, 4, 7, 8], [1, 2, 5, 6, 8], [2, 3, 6, 8], [1, 2, 3, 5, 8], [3, 5, 6, 7, 8],
         9, [2, 3, 4, 5, 6, 7, 8]]]


def test_alldifferent_strategy():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    sudoku_as = sudoku_solver.Sudoku.alldifferent_strategy(s0.data)

    assert sudoku_as == [
        [[2, 3, 4, 8], [2, 3, 4, 7, 8], 6, [1, 2, 5, 7], [2, 4, 8], [1, 2, 4, 5, 8], [3, 5, 8], [1, 3, 5, 8], 9],
        [[4, 8], 1, [4, 8], 3, [4, 6, 8], 9, 2, 7, [5, 6, 8]],
        [5, 9, [7, 8], [1, 2, 6, 7], [2, 6, 8], [1, 2, 8], 4, [1, 3, 6, 8], [1, 3, 6, 8]],
        [[1, 2, 3, 8], [2, 3, 8], 5, 9, [2, 3], 6, [3, 7, 8], 4, [1, 3, 7, 8]],
        [[1, 3, 4, 6], [3, 4, 6], 9, 8, 5, 7, [3, 6], 2, [1, 3, 6]],
        [7, [2, 3, 4, 6, 8], [4, 8], [2], 1, 4, 9, [3, 5, 6, 8], [3, 5, 6, 8]],
        [[6, 8], [5, 6, 7, 8], 3, 4, 9, [2, 5, 8], 1, [5, 6, 8], [2, 5, 6, 7, 8]],
        [9, [4, 5, 6, 8], 2, [1, 5, 6], 7, [1, 3, 5, 8], [3, 5, 6, 8], [3, 5, 6, 8], [3, 4, 5, 6, 8]],
        [[4, 6, 8], [4, 5, 6, 7, 8], 1, [2, 5, 6], [2, 3, 6, 8], [2, 3, 5, 8], [3, 5, 6, 7, 8], 9,
         [2, 3, 4, 5, 6, 7, 8]]]


def test_double_check():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    s1 = sudoku_solver.Sudoku("aaaaaa445aa8a35aaa46aa2a8aaaaa2aaaaaa7a8aaaaaaaaa5a2a45aaaaa18aa9aaa3aaa6aa19aaaa")
    s1.create_possibility()
    s0_dc = sudoku_solver.Sudoku.double_check(s0.data)
    s1_dc = sudoku_solver.Sudoku.double_check(s1.data)

    assert s0_dc is False
    assert s1_dc is True


def test_double_check_rcs():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    s1 = sudoku_solver.Sudoku("aaaaaa445aa8a35aaa46aa2a8aaaaa2aaaaaa7a8aaaaaaaaa5a2a45aaaaa18aa9aaa3aaa6aa19aaaa")
    s1.create_possibility()
    s0_dc = sudoku_solver.Sudoku.double_check_rcs(s0.data)
    s1_dc = sudoku_solver.Sudoku.double_check_rcs(s1.data)

    assert s0_dc is False
    assert s1_dc is True


def test_zero_check():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    s2 = sudoku_solver.Sudoku("4r36015k8de94kjr2o8520000cfghnjiaw4lk70i0fg0svb5f7x102erv2jh67909ld5jh0bd3hg4uy8k")
    s2.create_possibility()
    s0_ad = sudoku_solver.Sudoku.alldifferent_rcs(s0.data)
    s2_ad = sudoku_solver.Sudoku.alldifferent_rcs(s2.data)
    s0_zc = sudoku_solver.Sudoku.zero_check(s0_ad)
    s2_zc = sudoku_solver.Sudoku.zero_check(s2_ad)

    assert s0_zc is False
    assert s2_zc is True


def test_count_known_values():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    values = sudoku_solver.Sudoku.count_known_values(s0.data)

    assert values == 26


def test_get_min_choice():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    s0_ad = sudoku_solver.Sudoku.alldifferent_rcs(s0.data)
    choice = sudoku_solver.Sudoku.get_min_choice(s0_ad)

    assert choice == [1, 0]


def test_not_in_tabu_list():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.tabu_list = [[1, 2, 1], [1, 2, 2]]
    not_in_tabu_list_0, gamble_0 = s0.not_in_tabu_list([1, 2], [5, 6, 7])
    s1 = sudoku_solver.Sudoku("aaaaaa445aa8a35aaa46aa2a8aaaaa2aaaaaa7a8aaaaaaaaa5a2a45aaaaa18aa9aaa3aaa6aa19aaaa")
    s1.tabu_list = [[3, 5, 6], [3, 5, 7], [3, 5, 8]]
    not_in_tabu_list_1, gamble_1 = s1.not_in_tabu_list([3, 5], [6, 7, 8])

    assert not_in_tabu_list_0 is True
    assert gamble_0 == [1, 2, 5]
    assert not_in_tabu_list_1 is False
    assert gamble_1 is None


def test_alldifferent_tabu_search():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.create_possibility()
    s0.alldifferent_tabu_search()

    assert s0.data == [
        [2, 3, 6, 7, 4, 5, 8, 1, 9],
        [8, 1, 4, 3, 6, 9, 2, 7, 5],
        [5, 9, 7, 1, 2, 8, 4, 3, 6],
        [1, 2, 5, 9, 3, 6, 7, 4, 8],
        [3, 4, 9, 8, 5, 7, 6, 2, 1],
        [7, 6, 8, 2, 1, 4, 9, 5, 3],
        [6, 5, 3, 4, 9, 2, 1, 8, 7],
        [9, 8, 2, 5, 7, 1, 3, 6, 4],
        [4, 7, 1, 6, 8, 3, 5, 9, 2]]


def test_solve():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    s0.solve()

    assert s0.data == [
        [2, 3, 6, 7, 4, 5, 8, 1, 9],
        [8, 1, 4, 3, 6, 9, 2, 7, 5],
        [5, 9, 7, 1, 2, 8, 4, 3, 6],
        [1, 2, 5, 9, 3, 6, 7, 4, 8],
        [3, 4, 9, 8, 5, 7, 6, 2, 1],
        [7, 6, 8, 2, 1, 4, 9, 5, 3],
        [6, 5, 3, 4, 9, 2, 1, 8, 7],
        [9, 8, 2, 5, 7, 1, 3, 6, 4],
        [4, 7, 1, 6, 8, 3, 5, 9, 2]]


def test_get_hint():
    s0 = sudoku_solver.Sudoku("006000009010300270590000400005906040009057020700010000003490100002070000000000090")
    sudoku_unsolved = s0.data
    s0.solve()
    sudoku_solved = s0.data
    known_values_1 = sudoku_solver.Sudoku.count_known_values(sudoku_unsolved)
    sudoku_hint = sudoku_solver.Sudoku.get_hint(sudoku_unsolved, sudoku_solved)
    known_values_2 = sudoku_solver.Sudoku.count_known_values(sudoku_hint)

    assert known_values_1 == (known_values_2 - 1)
